<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Hotel Booking Home</title>
    <link href="https://fonts.loli.net/css?family=Open+Sans:400,700,300" rel="stylesheet" type="text/css">
    <link rel="stylesheet" href="/stylesheets/booking.css">  <!-- 确保引用路径正确 -->

</head>
<body>
    <h1 data-text="Hotel Booking Home">Hotel Booking Home</h1>
    <div class="image-container">
        <div class="image-item" style="background-image: url('https://tse4-mm.cn.bing.net/th/id/OIP-C.cQVQii7Z04oFTyAJx1pIUgHaE8?w=290&h=193&c=7&r=0&o=5&dpr=1.3&pid=1.7');" data-amount="0.1" onclick="openDatePicker(this)">
            <div class="info">0.1$</div>
        </div>
        <div class="image-item" style="background-image: url('https://tse4-mm.cn.bing.net/th/id/OIP-C.fzSWNz3OOsA_fClm_gKF9gHaHa?w=192&h=193&c=7&r=0&o=5&dpr=1.3&pid=1.7');" data-amount="0.1" onclick="openDatePicker(this)">
            <div class="info">0.1$ </div>
        </div>
        <div class="image-item" style="background-image: url('https://tse4-mm.cn.bing.net/th/id/OIP-C.Gyw81yNB697cMxMhqnI3XAHaE7?w=270&h=192&c=7&r=0&o=5&dpr=1.3&pid=1.7');" data-amount="0.1" onclick="openDatePicker(this)">
            <div class="info">0.1$</div>
        </div>
        <div class="image-item" style="background-image: url('https://tse3-mm.cn.bing.net/th/id/OIP-C.crlK90C12-YnF0m0wN5fKwHaGv?w=237&h=216&c=7&r=0&o=5&dpr=1.3&pid=1.7');" data-amount="0.1" onclick="openDatePicker(this)">
            <div class="info">0.1$</div>
        </div>
        <div class="image-item" style="background-image: url('https://th.bing.com/th/id/OIP.cky85LU0_JR_IAYTuNdlnAHaEK?w=302&h=183&c=7&r=0&o=5&dpr=1.3&pid=1.7');" data-amount="0.1" onclick="openDatePicker(this)">
            <div class="info">0.1$</div>
        </div>
        <div class="image-item" style="background-image: url('https://th.bing.com/th/id/OIP.mC0fRiE10H3-fotymAhrBgHaEJ?w=308&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7');" data-amount="0.1" onclick="openDatePicker(this)">
            <div class="info">0.1$</div>
        </div>
        <div class="image-item" style="background-image: url('https://th.bing.com/th/id/OIP.U0ZMVmcFJAW98mN8xEfydwHaEJ?w=302&h=180&c=7&r=0&o=5&dpr=1.3&pid=1.7');" data-amount="0.1" onclick="openDatePicker(this)">
            <div class="info">0.1$</div>
        </div>
    </div>
</div>

<div id="changeQuotaResult"></div>

<!-- 显示姓名的小框 -->
<div id="userInfo" class="user-info">
    <span id="userNameDisplay">欢迎，游客！</span>
    <button id="changeNameButton">修改</button>
</div>

<!-- 弹出框 (Modal) -->
<div id="popupModal" class="popup-modal" style="display: none;">
    <div class="popup-content">
        <span id="popupClose" class="popup-close">&times;</span>
        <div id="popupMessage" class="popup-message"></div>
    </div>
</div>

    <!-- 日期选择框 (Modal) -->
    <div id="datePickerModal" style="display: none;"> 
        <div class="modal-content">
            <h3>选择预定日期</h3>
            <input type="date" id="datePicker" />
            <button id="confirmDate">确认日期</button>
            <button id="cancelDate">取消</button>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/web3@1.6.1/dist/web3.min.js"></script>
    <script src="javascripts/booking.js"></script>
    <!-- 使用 ethers.js v5.7.2 -->
    <script src="https://cdn.jsdelivr.net/npm/ethers@5.7.2/dist/ethers.umd.min.js"></script>
    <!-- 在头部先加载 jQuery -->
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>


    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // 获取保存的用户名，如果有的话显示
            const userName = localStorage.getItem('username');
            if (userName) {
                document.getElementById("userNameDisplay").textContent = `${userName}`;
            }

            // 绑定修改姓名按钮
            document.getElementById("changeNameButton").addEventListener("click", function () {
                const newName = prompt("请输入您的姓名：");
                if (newName && newName.trim()) {
                    // 更新用户名并保存
                    localStorage.setItem('username', newName.trim());
                    document.getElementById("userNameDisplay").textContent = `${newName.trim()}`;
                }
            });
        });

        function showPopup(message) {
            console.log("showPopup called with message:", message); // 调试信息
            document.getElementById('popupMessage').innerText = message;
            document.getElementById('popupModal').classList.add('show'); // 添加 'show' 类
        }

        function hidePopup() {
            document.getElementById('popupModal').classList.remove('show'); // 移除 'show' 类
        }

        document.getElementById('popupClose').addEventListener('click', function() {
            hidePopup();
        });

        // 打开日期选择框的函数
        function openDatePicker(imageElement) {
            var amount = imageElement.getAttribute('data-amount'); // 获取金额数据
            document.getElementById('datePickerModal').style.display = 'flex'; 
            document.getElementById('confirmDate').setAttribute('data-amount', amount);
            document.getElementById('confirmDate').setAttribute('data-image-element', imageElement);
        }

        let isProcessing = false;  // 添加状态控制变量

        document.getElementById('confirmDate').addEventListener('click', async function() {
            var amount = this.getAttribute('data-amount');
            var date = document.getElementById('datePicker').value;

            // 防止多次点击
            if (isProcessing) {
                return; // 如果正在处理交易，直接退出
            }

            isProcessing = true; // 设置状态为正在处理

            if (date) {
                try {
                    await App.bookReservation(amount, date); // 调用预定函数，并等待交易完成
                } catch (error) {
                    alert('预定失败，请稍后再试');
                } finally {
                    isProcessing = false;  // 重置状态
                }
                closeDatePicker();
            } else {
                alert('请选择一个日期');
                isProcessing = false;  // 重置状态
            }
        });


        document.getElementById('cancelDate').addEventListener('click', function() {
            document.getElementById('datePickerModal').style.display = 'none'; // 关闭日期选择框
        });

        function closeDatePicker() {
            document.getElementById('datePickerModal').style.display = 'none';
        }

        // 初始化 App
        window.addEventListener('load', function() {
            if (typeof App === "undefined") {
                console.error("App is not defined");
                return;
            }

            console.log("App is defined and ready");

            // 启动 App
            App.start(function() {
                console.log('App initialized successfully.');
            });
        });

        window.addEventListener('load', function() {
            // 1. 加载 Truffle 合约的 ABI 和地址
            fetch('contracts/HotelBooking.json')
                .then(response => response.json())
                .then(data => {
                    console.log("Conference Artifacts:", data);
                    const conference_artifacts = data;
                    const abi = conference_artifacts.abi;
                    console.log("ABI:", abi);

                    // 尝试获取正确的地址
                    const networkId = '5777'; // Ganache 默认网络 ID
                    const address = conference_artifacts.networks[networkId]?.address;

                    if (!address) {
                        console.error("No address found for network ID:", networkId);
                        return;
                    }

                    // 3. 初始化 Ethers.js 提供者和签名者
                    if (typeof window.ethereum !== 'undefined') {
                        // 创建提供者
                        const provider = new ethers.providers.Web3Provider(window.ethereum);
                        // 请求用户授权
                        window.ethereum.request({ method: 'eth_requestAccounts' })
                            .then(() => {
                                // 创建签名者
                                const signer = provider.getSigner();
                                // 创建合约实例
                                const conferenceContract = new ethers.Contract(address, abi, signer);

                                // 使用合约
                                console.log("Contract loaded:", conferenceContract);
                            })
                            .catch(err => {
                                console.error("User denied account access:", err);
                            });
                    } else {
                        alert("Ethereum provider not found! Please install MetaMask.");
                    }
                })
                .catch(err => {
                    console.error("Error loading contract JSON:", err);
                });
        });

    </script>

    <script>
        // 定义 Web3 和 Ethers 相关操作
        let accounts, contract;
        let provider, signer, hotelContract;

        window.App = {
        start: function(callback) {

            var self = this;
            const providerUrl = "http://127.0.0.1:8545";  // Ganache CLI 默认的 RPC URL
            window.provider = new ethers.providers.JsonRpcProvider(providerUrl);

            // 获取账户信息
            window.provider.listAccounts().then(function(accs) {
                if (accs.length == 0) {
                    alert("Couldn't get any accounts! Make sure your Ethereum client is configured correctly.");
                    return;
                }

                accounts = accs;
                self.loadContractData(callback);  // 加载合约数据并传递给 initializeConference
            }).catch(function(err) {
                console.log("Error fetching accounts", err);
            });
        },

        loadContractData: function(callback) {
            var self = this;  // 保持对 window.App 的引用

            // 1. 加载 Truffle 合约的 ABI 和地址
            fetch('contracts/HotelBooking.json')
                .then(response => response.json())
                .then(data => {
                    console.log("Conference Artifacts:", data);

                    const conference_artifacts = data; // 确保获取到的 data 作为 conference_artifacts 使用

                    // 确保 conference_artifacts 包含 ABI 和网络信息
                    if (!conference_artifacts.abi || !conference_artifacts.networks) {
                        console.error("Invalid conference_artifacts structure.");
                        return;
                    }

                    // 使用 Ganache CLI 提供的网络 ID 和合约地址
                    const networkId = '5777'; // Ganache 默认网络 ID
                    const address = conference_artifacts.networks[networkId]?.address;

                    if (!address) {
                        console.error("No address found for network ID:", networkId);
                        return;
                    }
                    // 调用 initializeConference 方法，传递 ABI 和合约地址
                    self.initializeConference(conference_artifacts.abi, address, callback);  // 加载合约并初始化
                })
                .catch(err => {
                    console.error("Error loading contract JSON:", err);
                });
        },

        initializeConference: function(abi, contractAddress, callback) {
            var self = this;

            // 确保初始化方法在 App 对象内
            console.log("Initializing contract...");
            // 创建合约实例
            const signer = window.provider.getSigner();
            const conferenceContract = new ethers.Contract(contractAddress, abi, signer);
            // 保存合约实例
            self.conferenceContract = conferenceContract;
            // 直接获取合约地址，不需要使用 then()
            const address = conferenceContract.address;
            console.log("Contract Address:", address);
          // 使用 jQuery 更新页面内容，确保 jQuery 已经加载
            $("#confAddress").html(address);

            // 执行回调
            if (callback) callback();
        },

        checkValues: function(amount) {
            // 调用合约的 bookRoom 方法
            var amount = this.getAttribute('data-amount');
            var weiAmount = ethers.utils.parseEther(amount.toString());
            this.conferenceContract.bookRoom(1, {
                from: accounts[0], 
                value: weiAmount,  // 确保金额是 wei
                gasLimit: 3000000
            }).then(function() {
                return this.conferenceContract.availableRooms();
            }).then(function(roomsLeft) {
                var msgResult = `预定成功！余下房间: ${roomsLeft}`;
                $("#changeQuotaResult").html(msgResult);
            }).catch(function(error) {
                console.error("Error booking reservation:", error);
                $("#changeQuotaResult").html("发生错误，请稍后再试。");
            });
        },

// 预定函数
        bookReservation: async function(amount, date) {
            var self = this;
            $("#changeQuotaResult").html("交易处理中...");

            try {
                // 获取房间价格
                let roomPrice = await this.conferenceContract.roomPrice();
                roomPrice = parseFloat(roomPrice) / (10 ** 18); // 转换为 ETH

                // 检查金额是否等于房间价格
                if (roomPrice != amount) {
                    alert("支付金额必须等于房间价格！");
                    $("#changeQuotaResult").html("支付金额不匹配房间价格！");
                    return;
                }

                // 执行预定
                await self.conferenceContract.bookRoom(1, {
                    from: accounts[0],
                    value: ethers.utils.parseEther(amount.toString()),
                    gasLimit: 3000000
                });

                // 查询剩余房间数
                let roomsLeft = await self.conferenceContract.availableRooms();

                // 输出剩余房间数，检查是否成功获取
                console.log("roomsLeft: ", roomsLeft);

                // 根据剩余房间数更新显示信息
                var msgResult = roomsLeft.toString() < 100
                    ? `预定成功！预定日期: ${date}, 余下房间: ${roomsLeft}`
                    : "预定失败，请重试。";

                // 使用弹出框显示信息
                showPopup(msgResult);
            } catch (error) {
                console.error("Error booking reservation:", error);
                showPopup("发生错误，请稍后再试。");
            }
        }
    };
    </script>
</body>
</html>